[{"content":"It took me a few years to realise that running a VPS to host a simple blog and VPN (which I never use!) probably wasn\u0026rsquo;t worth the Â£5 I was spending a every month keeping it up and running. After chatting to a friend, I realised that a better option would be hosting a blog using Github pages. After a few hours I\u0026rsquo;d copied the posts from my old site, decommissioned my VPS and started getting to work using this amazing Github repo. The site is still composed using Hugo and this repo contains the requires Hugo modules to test everything within a Github codespace. Amazing!\nI was really surprised at just how easy the process was, after a few DNS changes everything was back up and running in the space of 3-4 hours. This also introduced me to Github codespaces which is a dream to use, instead of having to compose articles locally, SFTP them over to my VPS and run Hugo manually, the process is now as simple as spinning up the codespace, writing my article in VSCode, commiting my changes and pushing. A Github action takes over to ensure there are no Hugo errors and emails me with any failures/alerts. I may record a tutorial on getting this setup to share here.\n","date":"2024-01-06T18:14:36Z","permalink":"https://jameskent.xyz/p/switching-to-github-pages/","title":"Switching to Github Pages"},{"content":"Firstly, it\u0026rsquo;s been three years since my last update to this blog. Whilst this was mainly a learning exercise for myself, as well as having my own little corner on the web, I thought now would be a good time to start making semi-regular posts here as I now have quite a lot of time on my hands.\nBack in October my girlfriend and I quit our jobs, moved out of London and started an exciting journey traveling South America. Whilst this is something both of us have wanted to do for a while, actually doing it is something else entirely. We are both extremely happy that we bucked up the courage to get on with it and start researching, planning and inevitably booking our flight out of Heathrow and starting our adventure in Lima, Peru. At the time of writing this, we\u0026rsquo;ve been in Peru for around five weeks, our next stop being Colombia.\n","date":"2023-11-13T02:50:13Z","permalink":"https://jameskent.xyz/p/new-beginnings/","title":"New beginnings"},{"content":"PiBound is a project built out of love for PiHole and privacy. I wanted to make it as simple as possible to install PiHole and make use of Unbound to be your network\u0026rsquo;s recursive DNS server. Moving away from using your ISP\u0026rsquo;s, Google\u0026rsquo;s or Cloudflare\u0026rsquo;s DNS service is a great way to reduce the amount of eyes that can potentially monitor your internet usage and browsing habits. When we use Unbound as our DNS server, you eliminate the upstream DNS service, becoming your own DNS provider.\nWhat is PiHole? PiHole is an open source network DNS sink-hole, blocking any blacklisted domains before they reach your device. This is especially effective when running on a slower broadband connection, preventing any requests out to known tracking, advertisement or malicious sites can help preserve bandwidth noticeably. I\u0026rsquo;ve found over the years that pairing PiHole with a browser extension such as uBlock origin is a great combination that will pretty much block any annoyances when browsing the web. With this configuration, you get the benefits of blocking domains before they even hit your network and any that do get past PiHole will typically be picked up by uBlock and blocked.\nWhat is Unbound? Unbound is a validating, caching, recursive DNS server. It\u0026rsquo;s lightweight enough to run on a Pi-Zero, which is perfect for a project like this. We\u0026rsquo;ll be utilising Unbound to do our DNS recursion as well as it\u0026rsquo;s caching abilities, which will store a local cache of DNS records which can be served to the client immediately. To learn a little bit more about DNS, take a look at this fun comic.\nHow does the script work? Initially you will be prompted for the installation type you want to continue with, a lot of people that have used this script already have PiHole installed, so I added the functionality to just install Unbound and complete all necessary configuration.\nFirstly, the script will install PiHole, using the automated installation script method provided by the PiHole developers. Secondly, Unbound will be installed, root hints will be downloaded and the required Unbound configuration file will be pulled from the project\u0026rsquo;s GitHub repository. PiHole will be configured to use Unbound as our DNS server. Finally, a few DNS checks will take place to ensure DNSSEC is configured and Unbound is working as expected. Comparing our own DNS server\u0026rsquo;s performance to public resolvers. In my testing, I\u0026rsquo;ve found for the most part that using my own DNS server has surprisingly been just as fast as using a public resolver such as Google (8.8.8.8), or Cloudflare (1.1.1.1).\nSee the dig output below when querying google.com from Google\u0026rsquo;s DNS servers:\n1 2 $ dig google.com @8.8.8.8 | grep \u0026#34;Query\u0026#34; ;; Query time: 10 msec Compare this to querying google.com using my PiBound server:\n1 2 $ dig google.com @192.168.1.110 | grep \u0026#34;Query\u0026#34; ;; Query time: 2 msec We can assume some caching is happening here on my DNS server. Let\u0026rsquo;s try to query a site outside of my cache:\n1 2 dig networkchuck.coffee @192.168.1.110 | grep \u0026#34;Query\u0026#34; ;; Query time: 182 msec Comparing this to Google\u0026rsquo;s DNS:\n1 2 dig networkchuck.coffee @8.8.8.8 | grep \u0026#34;Query\u0026#34; ;; Query time: 142 msec These query time differences are negligable and will not have a noticeable impact on general performance.\n","date":"2020-10-09T13:26:43Z","permalink":"https://jameskent.xyz/p/pibound-a-simple-script-which-configures-pihole-and-unbound-to-be-your-networks-recursive-dns-server./","title":"PiBound - a simple script which configures PiHole and Unbound to be your network's recursive DNS server."},{"content":"I came across Hugo recently, a ridiculously fast website framework which is perfect for setting up a simple blog, serving up static webpages (which is something I love). Two hours later, I had purchased a domain via Namecheap, setup a Debian VPS with Vultr and was ready to begin the project.\nInstalling Nginx Nginx is a great, open source choice to run a simple blog like this one, it\u0026rsquo;s lightweight and fairly easy to get setup. Nginx is available in all major distro repositories, on a Debian you can install Nginx using apt:\n1 $ sudo apt install nginx -y On a Red Hat based distro, you can install Nginx using yum:\n1 $ sudo yum install nginx -y Once installed, start the service and confirm you can reach the default Nginx landing page by visiting your site.\n1 $ sudo systemctl start nginx Looks good! If you get to this stage, your server is accepting connections to port 80. If not, check your server is listening on port 80:\n1 $ ss -lntp | grep 80 If you get no output, Nginx hasn\u0026rsquo;t started correctly. If you get output, but you still can\u0026rsquo;t hit the landing page, check your firewall is allowing connections to port 80.\nInstalling Hugo Hugo is a fast and modern static site generator written in Go and can be installed on just about anything. Grab the latest release from Hugo\u0026rsquo;s Github repository and run the following command:\n1 hugo version If you get some output, Hugo is ready to go. If you don\u0026rsquo;t get any output, ensure that the Hugo binary is in your $PATH variable, this will differ based on OS. On Linux you can execute $PATH, this will print out the locations your terminal is able to run programs from.\n1 2 $ $PATH -bash: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin Creating your site Assuming you have Hugo working as expected, you may want to create a new directory for your site contents to live in. In my case, I setup a folder in /home/ named sites, then ran the following command:\n1 $ hugo new site sitenamehere Hugo will go ahead and create a directory structure which looks like this:\n1 2 3 4 5 6 7 8 9 drwxr-xr-x 2 www-data www-data 4096 Sep 10 21:00 archetypes -rw-r--r-- 1 www-data www-data 539 Sep 15 16:49 config.toml drwxr-xr-x 3 www-data www-data 4096 Sep 11 15:58 content drwxr-xr-x 2 www-data www-data 4096 Sep 10 21:00 data drwxr-xr-x 2 www-data www-data 4096 Sep 10 21:00 layouts drwxr-xr-x 6 root root 4096 Aug 30 1754 public drwxr-xr-x 3 www-data www-data 4096 Sep 10 21:05 resources drwxr-xr-x 2 www-data www-data 4096 Sep 15 17:01 static drwxr-xr-x 3 www-data www-data 4096 Sep 10 21:02 themes To find out a bit more about how this all ties into your site generation, check the Hugo documentation.\nAdding a theme to Hugo Hugo has a great collection of themes on their website to choose from, I chose the hello-friend-ng for my blog. Follow the instructions to download your theme of choice and save the theme into your themes/ folder in your sites contents. Finally, add the theme name to your config.toml file in the root of your site contents:\n1 2 3 4 5 baseURL = \u0026#34;https://jameskent.xyz\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;James Kent\u0026#34; theme = \u0026#34;hello-friend-ng\u0026#34; paginate = 10 Creating a post Now for the actual content. Run the following command to create a new post:\n1 $ hugo new posts/my-first-post.md Hugo will create a new post named my-first-post in your content/posts folder. Make all of the edits to this file you would like to make, then save your changes.\nGenerating your site After all of these changes to your site, adding your theme and creating your first post you should generate your site. This is the real power behind Hugo, simply change directory into your site folder, and run:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ hugo | EN -------------------+----- Pages | 7 Paginator pages | 0 Non-page files | 0 Static files | 13 Processed images | 0 Aliases | 2 Sitemaps | 1 Cleaned | 0 Total in 98 ms Configuring Nginx You should have Nginx installed at this point, if not, refer back to the first section of this article for instruction.\nWe need write out a configuration file, so Nginx knows what content to serve to users visiting your site. Luckily for us, Nginx installs with a default site configuration file which we can copy and use for our site:\n1 2 $ cd /etc/nginx/sites-available $ cp default nameofmysite Now we have a copy of the default configuration file, open your site file in your favourite text editor. A lot of this file is taken up by comments, without comments, your site config should look something like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 server { listen 80; # Tells nginx which port to listen on for incoming connections. listen [::]:80; # server_name mysite.com www.mysite.com; # Enter your site name here. root /home/username/mysite/public/; # Enter the full path to your Hugo site here. index index.html; location / { try_files $uri $uri/ =404; } } To enable the site, add a symlink from your site\u0026rsquo;s location into the /etc/nginx/sites-enabled:\n1 $ sudo ln -s /etc/nginx/sites-available/mysitename /etc/nginx/sites-enabled/mysitename Finally, enable and restart the Nginx service:\n1 2 $ sudo systemctl enable nginx $ sudo systemctl restart nginx Adding SSL to your site Adding SSL to your site has never been easier and best of all, it\u0026rsquo;s completely free! There are a myriad of reasons to add SSL to your site which I won\u0026rsquo;t go into detail in, in this blog post. Just do it.\nVisit the certbot site to get detailed instructions for installing on your OS and web server of choice.\nConclusion Assuming you ran through this article without any errors, your site should be up and running! Hugo is a fantastic project and I have had a great time so far getting it installed and setup.\n","date":"2020-09-11T18:14:37Z","permalink":"https://jameskent.xyz/p/how-i-built-a-simple-blog-using-hugo-and-nginx/","title":"How I built a simple blog using Hugo and Nginx"}]